name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Auto-format code
      run: cargo fmt --all
    
    - name: Check if formatting changed anything
      id: verify-formatting
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "needs_formatting=true" >> $GITHUB_OUTPUT
          echo "Code was auto-formatted"
        else
          echo "needs_formatting=false" >> $GITHUB_OUTPUT
          echo "Code is already properly formatted"
        fi
    
    - name: Commit formatting changes
      if: steps.verify-formatting.outputs.needs_formatting == 'true' && github.event_name == 'pull_request'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "auto: format code with cargo fmt"
        git push
    
    - name: Fail if formatting is needed on main/develop
      if: steps.verify-formatting.outputs.needs_formatting == 'true' && github.event_name == 'push'
      run: |
        echo "Code formatting is required. Please run 'cargo fmt --all' and commit the changes."
        exit 1
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vrcli-${{ matrix.os }}
        path: |
          target/release/vrcli*
          !target/release/vrcli.d
